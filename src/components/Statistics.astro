---
// components/ServerStats.astro
interface StatsData {
  accountCounter: number;
  characterCounter: number;
  propertyCounter: number;
  vehicleCounter: number;
}

interface ApiResponse {
  message: string;
  httpCode: number;
  source: string;
  payload: StatsData;
}

let stats: StatsData = {
  accountCounter: 0,
  characterCounter: 0,
  propertyCounter: 0,
  vehicleCounter: 0
};
let error = '';
let isLoading = true;
let usingFallbackData = false;

async function fetchStats(): Promise<StatsData> {
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 10000);

    const response = await fetch('https://api.sarp.es/api/public/stats', {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'User-Agent': 'Mozilla/5.0 (compatible; WebApp/1.0)'
      },
      signal: controller.signal
    });

    clearTimeout(timeoutId);
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const contentType = response.headers.get('content-type');
    if (!contentType?.includes('application/json')) {
      throw new Error('Invalid content type');
    }
    
    const data: ApiResponse = await response.json();
    
    if (data.message !== "OK" || !data.payload) {
      throw new Error('Invalid API response structure');
    }
    
    return data.payload;
    
  } catch (error) {
    if (error instanceof Error) {
      if (error.name === 'AbortError') {
        throw new Error('Request timeout');
      }
      throw new Error('Failed to fetch stats');
    }
    throw new Error('Unknown error occurred');
  }
}

// OBTENEMOS ESTADÍSTICAS
try {
  stats = await fetchStats();
} catch (fetchError) {
  error = fetchError instanceof Error ? fetchError.message : 'Error desconocido';
  usingFallbackData = true;
} finally {
  isLoading = false;
}

function formatNumber(num: number): string {
  return new Intl.NumberFormat('es-CL').format(num);
}
---

<section class="w-full py-12 md:py-20 px-4 md:px-8">
  <div class="max-w-7xl mx-auto">
    <!-- Header -->
    <div class="text-center mb-12">
      <h2 class="text-3xl md:text-5xl font-bold bg-gradient-to-r from-primary to-[#b41919] bg-clip-text text-transparent mb-4">
        Estadísticas del Servidor
      </h2>
      
      <p class="text-xl text-white/80 font-bold leading-tight">
        <strong class="font-extrabold">Descubre los números</strong> que hacen grande a nuestra comunidad.
      </p>
    </div>

    {!isLoading ? (
      <!-- Stats Grid -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 md:gap-8">
        <!-- Cuentas -->
        <div class="relative group bg-black/20 border border-white/10 rounded-2xl p-6 hover:border-primary/30 transition-all duration-300 hover:scale-[1.02] backdrop-blur-sm overflow-hidden">
          <div class="absolute right-4 top-6 bottom-6 w-1 bg-white/10 rounded-full">
            <div class="w-full h-full bg-gradient-to-t from-blue-500 to-cyan-400 rounded-full transform translate-y-full group-hover:translate-y-0 transition-transform duration-1000 ease-out"></div>
          </div>

          <div class="relative z-10 pr-6">
            <div class="w-12 h-12 bg-gradient-to-br from-blue-500/20 to-cyan-400/20 border border-blue-500/30 rounded-xl flex items-center justify-center mb-4 group-hover:scale-110 transition-transform duration-300">
              <svg class="w-6 h-6 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
              </svg>
            </div>

            <div class="space-y-2">
              <h3 class="text-white/60 text-sm font-medium uppercase tracking-wider">
                Cuentas Registradas
              </h3>
              
              <div class="flex items-baseline">
                <span class="text-3xl md:text-4xl font-bold bg-gradient-to-r from-blue-500 to-cyan-400 bg-clip-text text-transparent" data-number={stats.accountCounter}>
                  {formatNumber(stats.accountCounter)}
                </span>
              </div>

              <div class="flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                <div class="w-2 h-2 bg-blue-400 rounded-full animate-pulse"></div>
                <span class="text-white/40 text-xs">Usuarios activos</span>
              </div>
            </div>
          </div>
        </div>

        <!-- Personajes -->
        <div class="relative group bg-black/20 border border-white/10 rounded-2xl p-6 hover:border-primary/30 transition-all duration-300 hover:scale-[1.02] backdrop-blur-sm overflow-hidden">
          <div class="absolute right-4 top-6 bottom-6 w-1 bg-white/10 rounded-full">
            <div class="w-full h-full bg-gradient-to-t from-green-500 to-emerald-400 rounded-full transform translate-y-full group-hover:translate-y-0 transition-transform duration-1000 ease-out delay-100"></div>
          </div>

          <div class="relative z-10 pr-6">
            <div class="w-12 h-12 bg-gradient-to-br from-green-500/20 to-emerald-400/20 border border-green-500/30 rounded-xl flex items-center justify-center mb-4 group-hover:scale-110 transition-transform duration-300">
              <svg class="w-6 h-6 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
              </svg>
            </div>

            <div class="space-y-2">
              <h3 class="text-white/60 text-sm font-medium uppercase tracking-wider">
                Personajes Creados
              </h3>
              
              <div class="flex items-baseline">
                <span class="text-3xl md:text-4xl font-bold bg-gradient-to-r from-green-500 to-emerald-400 bg-clip-text text-transparent" data-number={stats.characterCounter}>
                  {formatNumber(stats.characterCounter)}
                </span>
              </div>

              <div class="flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                <div class="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                <span class="text-white/40 text-xs">Historias únicas</span>
              </div>
            </div>
          </div>
        </div>

        <!-- Propiedades -->
        <div class="relative group bg-black/20 border border-white/10 rounded-2xl p-6 hover:border-primary/30 transition-all duration-300 hover:scale-[1.02] backdrop-blur-sm overflow-hidden">
          <div class="absolute right-4 top-6 bottom-6 w-1 bg-white/10 rounded-full">
            <div class="w-full h-full bg-gradient-to-t from-purple-500 to-pink-400 rounded-full transform translate-y-full group-hover:translate-y-0 transition-transform duration-1000 ease-out delay-200"></div>
          </div>

          <div class="relative z-10 pr-6">
            <div class="w-12 h-12 bg-gradient-to-br from-purple-500/20 to-pink-400/20 border border-purple-500/30 rounded-xl flex items-center justify-center mb-4 group-hover:scale-110 transition-transform duration-300">
              <svg class="w-6 h-6 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
              </svg>
            </div>

            <div class="space-y-2">
              <h3 class="text-white/60 text-sm font-medium uppercase tracking-wider">
                Propiedades
              </h3>
              
              <div class="flex items-baseline">
                <span class="text-3xl md:text-4xl font-bold bg-gradient-to-r from-purple-500 to-pink-400 bg-clip-text text-transparent" data-number={stats.propertyCounter}>
                  {formatNumber(stats.propertyCounter)}
                </span>
              </div>

              <div class="flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                <div class="w-2 h-2 bg-purple-400 rounded-full animate-pulse"></div>
                <span class="text-white/40 text-xs">Espacios únicos</span>
              </div>
            </div>
          </div>
        </div>

        <!-- Vehículos -->
        <div class="relative group bg-black/20 border border-white/10 rounded-2xl p-6 hover:border-primary/30 transition-all duration-300 hover:scale-[1.02] backdrop-blur-sm overflow-hidden">
          <div class="absolute right-4 top-6 bottom-6 w-1 bg-white/10 rounded-full">
            <div class="w-full h-full bg-gradient-to-t from-orange-500 to-red-400 rounded-full transform translate-y-full group-hover:translate-y-0 transition-transform duration-1000 ease-out delay-300"></div>
          </div>

          <div class="relative z-10 pr-6">
            <div class="w-12 h-12 bg-gradient-to-br from-orange-500/20 to-red-400/20 border border-orange-500/30 rounded-xl flex items-center justify-center mb-4 group-hover:scale-110 transition-transform duration-300">
              <svg class="w-6 h-6 text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
              </svg>
            </div>

            <div class="space-y-2">
              <h3 class="text-white/60 text-sm font-medium uppercase tracking-wider">
                Vehículos
              </h3>
              
              <div class="flex items-baseline">
                <span class="text-3xl md:text-4xl font-bold bg-gradient-to-r from-orange-500 to-red-400 bg-clip-text text-transparent" data-number={stats.vehicleCounter}>
                  {formatNumber(stats.vehicleCounter)}
                </span>
              </div>

              <div class="flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                <div class="w-2 h-2 bg-orange-400 rounded-full animate-pulse"></div>
                <span class="text-white/40 text-xs">Flota disponible</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    ) : (
      <!-- Loading State -->
      <div class="text-center py-12">
        <div class="inline-flex items-center px-6 py-3 bg-black/20 border border-white/10 rounded-xl backdrop-blur-sm">
          <div class="animate-spin rounded-full h-5 w-5 border-b-2 border-primary mr-3"></div>
          <span class="text-white/80">Cargando estadísticas...</span>
        </div>
      </div>
    )}

    <!-- Status Indicator -->
    {!isLoading && (
      <div class="text-center mt-8">
        <div class="inline-flex items-center px-6 py-3 bg-black/20 border border-white/10 rounded-xl backdrop-blur-sm">
          <div class={`w-2 h-2 rounded-full mr-3 animate-pulse ${usingFallbackData ? 'bg-yellow-400' : 'bg-green-400'}`}></div>
          <span class="text-white/60 text-sm">
            {usingFallbackData ? 'Mostrando datos de respaldo' : 'Conectado al servidor en tiempo real'}
          </span>
        </div>
      </div>
    )}
  </div>
</section>

<script is:inline>
document.addEventListener('DOMContentLoaded', function() {
  // Configuración de animación
  const animationConfig = {
    duration: 1800,
    easing: t => t * (2 - t) // Easing out
  };

  // Animación de números
  const animateValue = (element, start, end) => {
    let startTimestamp = null;
    const step = (timestamp) => {
      if (!startTimestamp) startTimestamp = timestamp;
      const progress = Math.min((timestamp - startTimestamp) / animationConfig.duration, 1);
      const easedProgress = animationConfig.easing(progress);
      const value = Math.floor(start + easedProgress * (end - start));
      element.textContent = value.toLocaleString('es-CL');
      if (progress < 1) {
        window.requestAnimationFrame(step);
      }
    };
    window.requestAnimationFrame(step);
  };

  // Observer para activar animaciones
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const element = entry.target;
        const targetValue = parseInt(element.dataset.number);
        if (!isNaN(targetValue)) {
          animateValue(element, 0, targetValue);
          observer.unobserve(element);
        }
      }
    });
  }, {
    threshold: 0.5,
    rootMargin: '0px 0px -100px 0px'
  });

  // Observar todos los elementos con números
  document.querySelectorAll('[data-number]').forEach(element => {
    observer.observe(element);
  });

  // Efectos hover optimizados
  const cards = document.querySelectorAll('.group');
  cards.forEach(card => {
    card.addEventListener('mouseenter', () => {
      card.style.transform = 'translateY(-4px)';
      card.style.boxShadow = '0 10px 25px rgba(0, 0, 0, 0.2)';
    });
    card.addEventListener('mouseleave', () => {
      card.style.transform = '';
      card.style.boxShadow = '';
    });
  });
});
</script>