---
// components/Events.astro
interface Event {
  title: string;
  description: string;
  image_url: string;
  event_date: string;
  id: string | null;
}

let events: Event[] = [];
let error = '';
let isLoading = false;

async function fetchEvents(): Promise<Event[]> {
  try {
    const response = await fetch('https://api.sarp.es/api/public/events', {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'User-Agent': 'Mozilla/5.0 (compatible; WebApp/1.0)'
      },
      signal: AbortSignal.timeout(10000)
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status} - ${response.statusText}`);
    }
    
    const contentType = response.headers.get('content-type');
    if (!contentType || !contentType.includes('application/json')) {
      throw new Error('Response is not JSON format');
    }
    
    const data = await response.json();
    
    if (data.message === "OK" && data.payload && Array.isArray(data.payload)) {
      return data.payload;
    } else if (Array.isArray(data)) {
      return data;
    } else if (data.events && Array.isArray(data.events)) {
      return data.events;
    } else {
      throw new Error('Invalid API response structure - expected array of events');
    }
    
  } catch (fetchError: unknown) {
    if (fetchError instanceof Error) {
      if (fetchError.name === 'AbortError') {
        throw new Error('Request timeout - API took too long to respond');
      } else if (fetchError.name === 'TypeError') {
        throw new Error('Network error - check internet connection');
      } else {
        throw fetchError;
      }
    } else {
      throw new Error('Unknown error occurred');
    }
  }
}

// OBTENEMOS EVENTOS
try {
  isLoading = true;
  events = await fetchEvents();
} catch (fetchError: unknown) {
  if (fetchError instanceof Error) {
    error = fetchError.message;
  } else {
    error = 'Unknown error occurred';
  }
} finally {
  isLoading = false;
}

function formatDate(dateString: string): string {
  try {
    const date = new Date(dateString);
    
    if (isNaN(date.getTime())) {
      return dateString;
    }
    
    return date.toLocaleDateString('es-CL', {
      day: 'numeric',
      month: 'long',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      timeZone: 'America/Santiago'
    });
  } catch (dateError) {
    return dateString;
  }
}

function isEventPast(dateString: string): boolean {
  try {
    const eventDate = new Date(dateString);
    const now = new Date();
    return eventDate < now;
  } catch {
    return false;
  }
}

const upcomingEvents = events
  .filter(event => !isEventPast(event.event_date))
  .sort((a, b) => new Date(a.event_date).getTime() - new Date(b.event_date).getTime());

const displayEvents = upcomingEvents.length > 0 ? upcomingEvents : events;
---

<section class="w-full py-12 md:py-20 px-4 md:px-8">
  <div class="max-w-7xl mx-auto">
    <!-- Header -->
    <div class="text-center mb-8">
      <h2 class="text-3xl md:text-4xl font-bold bg-gradient-to-r from-primary to-[#b41919] bg-clip-text text-transparent mb-3">
        {upcomingEvents.length > 0 ? 'Próximos Eventos' : 'Eventos'}
      </h2>
      
      <p class="text-lg text-white/80 font-bold leading-tight">
        <strong class="font-extrabold">Descubre los eventos más emocionantes</strong> que te esperan en nuestro servidor de SAMP.
      </p>
    </div>

    {displayEvents.length > 0 ? (
      <div class="relative pb-8">
        <!-- Carousel Container -->
        <div class="overflow-hidden">
          <div class="carousel-track flex transition-transform duration-700 ease-in-out" id="carousel-track">
            {displayEvents.map((event) => (
              <div class="flex-shrink-0 w-full px-4">
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 lg:gap-12 items-center">
                  <!-- Imagen del evento -->
                  <div class="order-1 lg:order-1">
                    <div class="relative group cursor-pointer">
                      <div class="aspect-square w-full border-2 border-primary/30 rounded-2xl overflow-hidden bg-gradient-to-br from-primary/10 to-[#b41919]/10 backdrop-blur-sm">
                        <img
                          src={event.image_url}
                          alt={event.title}
                          class="w-full h-full object-cover select-none transition-all duration-500 group-hover:scale-110"
                          loading="lazy"
                          onerror="this.src='https://via.placeholder.com/500x500/1a1a1a/ffffff?text=Evento'"
                        />
                        <!-- Overlay con efecto hover -->
                        <div class="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-all duration-300 flex items-end justify-center">
                          <div class="p-4 text-center transform translate-y-4 group-hover:translate-y-0 transition-transform duration-300">
                            <span class="inline-flex items-center px-3 py-1.5 bg-primary/90 text-white rounded-full text-sm font-medium backdrop-blur-sm">
                              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                              </svg>
                              Ver detalles
                            </span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                  <!-- Contenido del evento -->
                  <div class="order-2 lg:order-2 space-y-4">
                    <div class="space-y-3">
                      <h3 class="text-2xl md:text-3xl font-bold bg-gradient-to-r from-primary to-[#b41919] bg-clip-text text-transparent leading-tight">
                        {event.title}
                      </h3>
                      
                      <p class="text-base md:text-lg text-white/90 leading-relaxed">
                        {event.description}
                      </p>
                    </div>

                    <!-- Fecha y estado del evento -->
                    <div class="flex flex-wrap gap-2">
                      <div class={`inline-flex items-center px-3 py-2 rounded-lg text-sm font-medium border backdrop-blur-sm ${
                        isEventPast(event.event_date) 
                          ? 'bg-gray-800/50 border-gray-600/30 text-gray-300' 
                          : 'bg-gradient-to-r from-primary/20 to-[#b41919]/20 border-primary/30 text-white'
                      }`}>
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2-2z"></path>
                        </svg>
                        {formatDate(event.event_date)}
                      </div>
                      
                      {isEventPast(event.event_date) && (
                        <span class="inline-flex items-center px-2.5 py-1.5 bg-gray-700/50 border border-gray-600/30 text-gray-400 rounded-lg text-xs backdrop-blur-sm">
                          <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                          </svg>
                          Finalizado
                        </span>
                      )}
                      
                      {!isEventPast(event.event_date) && (
                        <span class="inline-flex items-center px-2.5 py-1.5 bg-green-500/20 border border-green-500/30 text-green-400 rounded-lg text-xs backdrop-blur-sm">
                          <div class="w-2 h-2 bg-green-400 rounded-full mr-2 animate-pulse"></div>
                          Próximamente
                        </span>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        <!-- Navigation Controls -->
        {displayEvents.length > 1 && (
          <>
            <!-- Navigation Buttons -->
            <button 
              id="prev-btn"
              class="absolute left-0 top-1/2 -translate-y-1/2 w-10 h-10 bg-black/50 hover:bg-black/70 border border-white/20 hover:border-primary/50 rounded-full flex items-center justify-center transition-all duration-300 hover:scale-110 backdrop-blur-sm z-10 group"
              aria-label="Evento anterior"
            >
              <svg class="w-4 h-4 text-white group-hover:text-primary transition-colors duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
              </svg>
            </button>

            <button 
              id="next-btn"
              class="absolute right-0 top-1/2 -translate-y-1/2 w-10 h-10 bg-black/50 hover:bg-black/70 border border-white/20 hover:border-primary/50 rounded-full flex items-center justify-center transition-all duration-300 hover:scale-110 backdrop-blur-sm z-10 group"
              aria-label="Siguiente evento"
            >
              <svg class="w-4 h-4 text-white group-hover:text-primary transition-colors duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </button>

            <!-- Indicators -->
            <div class="flex justify-center space-x-2 mt-8" id="indicators">
              {displayEvents.map((_, index) => (
                <button 
                  class={`w-2.5 h-2.5 rounded-full transition-all duration-300 ${
                    index === 0 
                      ? 'bg-primary scale-125 shadow-lg shadow-primary/50' 
                      : 'bg-white/30 hover:bg-white/50 hover:scale-110'
                  }`}
                  data-index={index}
                  aria-label={`Ir al evento ${index + 1}`}
                ></button>
              ))}
            </div>
          </>
        )}
      </div>
    ) : (
      <!-- Empty State -->
      <div class="text-center py-12">
        <div class="bg-black/20 border border-white/10 rounded-2xl p-8 max-w-md mx-auto backdrop-blur-sm">
          <div class="w-16 h-16 bg-gradient-to-br from-primary/20 to-[#b41919]/20 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2-2z"></path>
            </svg>
          </div>
          <h3 class="text-white text-lg font-bold mb-2">No hay eventos disponibles</h3>
          <p class="text-white/60 text-sm">Por favor, inténtalo más tarde</p>
        </div>
      </div>
    )}
  </div>
</section>

<script is:inline>
document.addEventListener('DOMContentLoaded', function() {
  const track = document.getElementById('carousel-track');
  const prevBtn = document.getElementById('prev-btn');
  const nextBtn = document.getElementById('next-btn');
  const indicators = document.querySelectorAll('#indicators button');
  
  if (!track || !prevBtn || !nextBtn || indicators.length === 0) return;
  
  const slides = track.children;
  let currentIndex = 0;
  const totalSlides = slides.length;

  if (totalSlides <= 1) return;

  let autoplayInterval = null;

  function updateCarousel() {
    const translateX = -currentIndex * 100;
    track.style.transform = `translateX(${translateX}%)`;

    indicators.forEach((indicator, index) => {
      if (index === currentIndex) {
        indicator.className = 'w-2.5 h-2.5 rounded-full transition-all duration-300 bg-primary scale-125 shadow-lg shadow-primary/50';
      } else {
        indicator.className = 'w-2.5 h-2.5 rounded-full transition-all duration-300 bg-white/30 hover:bg-white/50 hover:scale-110';
      }
    });
  }

  function nextSlide() {
    currentIndex = (currentIndex + 1) % totalSlides;
    updateCarousel();
    resetAutoplay();
  }

  function prevSlide() {
    currentIndex = (currentIndex - 1 + totalSlides) % totalSlides;
    updateCarousel();
    resetAutoplay();
  }

  function resetAutoplay() {
    if (autoplayInterval) {
      clearInterval(autoplayInterval);
    }
    autoplayInterval = setInterval(nextSlide, 6000);
  }

  nextBtn.addEventListener('click', nextSlide);
  prevBtn.addEventListener('click', prevSlide);

  indicators.forEach((indicator, index) => {
    indicator.addEventListener('click', () => {
      currentIndex = index;
      updateCarousel();
      resetAutoplay();
    });
  });

  // Auto-play
  autoplayInterval = setInterval(nextSlide, 6000);

  const section = document.querySelector('section');
  if (section) {
    section.addEventListener('mouseenter', () => {
      if (autoplayInterval) {
        clearInterval(autoplayInterval);
      }
    });
    section.addEventListener('mouseleave', resetAutoplay);
  }

  // Keyboard navigation
  document.addEventListener('keydown', (e) => {
    if (e.key === 'ArrowLeft') prevSlide();
    else if (e.key === 'ArrowRight') nextSlide();
  });

  // Touch support
  let startX = 0;
  let currentX = 0;
  let isDragging = false;

  track.addEventListener('touchstart', (e) => {
    startX = e.touches[0].clientX;
    isDragging = true;
  });

  track.addEventListener('touchmove', (e) => {
    if (!isDragging) return;
    e.preventDefault();
    currentX = e.touches[0].clientX;
  });

  track.addEventListener('touchend', () => {
    if (!isDragging) return;
    const diff = startX - currentX;
    const threshold = 50;

    if (Math.abs(diff) > threshold) {
      if (diff > 0) nextSlide();
      else prevSlide();
    }

    isDragging = false;
  });
});
</script>